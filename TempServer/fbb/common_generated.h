// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMMON_H_
#define FLATBUFFERS_GENERATED_COMMON_H_

#include "flatbuffers/flatbuffers.h"

struct Position;

struct EntityInfo;

enum class EntityFlag : int8_t {
  Player = 0,
  Monster = 1,
  Resource = 2,
  MIN = Player,
  MAX = Resource
};

inline const EntityFlag (&EnumValuesEntityFlag())[3] {
  static const EntityFlag values[] = {
    EntityFlag::Player,
    EntityFlag::Monster,
    EntityFlag::Resource
  };
  return values;
}

inline const char * const *EnumNamesEntityFlag() {
  static const char * const names[4] = {
    "Player",
    "Monster",
    "Resource",
    nullptr
  };
  return names;
}

inline const char *EnumNameEntityFlag(EntityFlag e) {
  if (flatbuffers::IsOutRange(e, EntityFlag::Player, EntityFlag::Resource)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEntityFlag()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Position FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  Position() {
    memset(static_cast<void *>(this), 0, sizeof(Position));
  }
  Position(float _x, float _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(Position, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) EntityInfo FLATBUFFERS_FINAL_CLASS {
 private:
  Position pos_;
  int8_t flag_;
  int8_t padding0__;  int16_t padding1__;
  uint32_t table_id_;
  uint32_t entity_id_;

 public:
  EntityInfo() {
    memset(static_cast<void *>(this), 0, sizeof(EntityInfo));
  }
  EntityInfo(const Position &_pos, EntityFlag _flag, uint32_t _table_id, uint32_t _entity_id)
      : pos_(_pos),
        flag_(flatbuffers::EndianScalar(static_cast<int8_t>(_flag))),
        padding0__(0),
        padding1__(0),
        table_id_(flatbuffers::EndianScalar(_table_id)),
        entity_id_(flatbuffers::EndianScalar(_entity_id)) {
    (void)padding0__;    (void)padding1__;
  }
  const Position &pos() const {
    return pos_;
  }
  EntityFlag flag() const {
    return static_cast<EntityFlag>(flatbuffers::EndianScalar(flag_));
  }
  uint32_t table_id() const {
    return flatbuffers::EndianScalar(table_id_);
  }
  uint32_t entity_id() const {
    return flatbuffers::EndianScalar(entity_id_);
  }
};
FLATBUFFERS_STRUCT_END(EntityInfo, 20);

#endif  // FLATBUFFERS_GENERATED_COMMON_H_
